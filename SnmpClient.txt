package Snmp4j; 
import java.io.IOException; 
import org.snmp4j.CommunityTarget;
import org.snmp4j.PDU;
import org.snmp4j.Snmp;
import org.snmp4j.Target;
import org.snmp4j.TransportMapping;
/*import org.snmp4j.agent.mo.MOAccessImpl;
import org.snmp4j.event.ResponseListener;
import org.snmp4j.util.DefaultPDUFactory;
import org.snmp4j.util.TableEvent;
import org.snmp4j.util.TableUtils;*/
import org.snmp4j.event.ResponseEvent;
import org.snmp4j.mp.SnmpConstants;
import org.snmp4j.smi.Address;
import org.snmp4j.smi.GenericAddress;
import org.snmp4j.smi.OID;
import org.snmp4j.smi.OctetString;
import org.snmp4j.smi.VariableBinding;
import org.snmp4j.transport.DefaultUdpTransportMapping;


public class SnmpClient {

private Snmp s = null;

private String address = null;

public static void main(String[] args) throws IOException {


SnmpClient c = new SnmpClient("udp:127.0.0.1/161");

c.start();


String sysDescr = c.getAsString(new OID(".1.3.6.1.2.1.1.1.0"));

System.out.println(sysDescr);

}

public SnmpClient(String addr)

{
    super();

    this.address = addr;
    try{
        start();
    }catch (IOException e){
        throw new RuntimeException(e);
    }

}
// Since snmp4j relies on asynch req/resp we need a listener
// for responses which should be closed
    public void stop() throws IOException {
        s.close();
    }

    private void start() throws IOException {
        TransportMapping transport = new DefaultUdpTransportMapping();
        s = new Snmp(transport);
      
        transport.listen();
    }



public String getAsString(OID oid) throws IOException {

ResponseEvent e = get(new OID[] { oid });

return e.getResponse().get(0).getVariable().toString();

}

public ResponseEvent get(OID oids[]) throws IOException {

PDU p = new PDU();

for (OID oid : oids) {
p.add(new VariableBinding(oid));
}

p.setType(PDU.GET);

ResponseEvent event = s.send(p, getTarget(), null);

if(event != null) {

return event;

}

throw new RuntimeException("GET timed out");

}


private Target getTarget() {

Address targetAddress = GenericAddress.parse(address);

CommunityTarget t = new CommunityTarget();

t.setCommunity(new OctetString("public"));

t.setAddress(targetAddress);

t.setRetries(2);

t.setTimeout(1500);

t.setVersion(SnmpConstants.version2c);

return t;

}

    public static String extractSingleString(ResponseEvent event) {
        return event.getResponse().get(0).getVariable().toString();
    }
}
